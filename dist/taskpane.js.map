{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/* global Office, Excel */\r\n\r\n/**\r\n * Simple Excel Chatbot Add-in\r\n * - Finds \"InSync API\" sheet\r\n * - Sends data to backend for embeddings\r\n * - Queries backend with RAG\r\n * - Displays answers and charts\r\n */\r\n\r\n// Configuration\r\n// const BACKEND_URL = 'https://insyncai.duckdns.org';\r\nconst BACKEND_URL = 'https://insyncai.duckdns.org';  // Change if needed\r\nconst SHEET_NAME = 'InSync API';\r\n\r\nconst GUIDANCE_SHEET = 'Guidance';\r\n\r\n// State\r\nlet isReady = false;\r\nlet isProcessing = false;\r\nlet embeddingsLoaded = false;  // Track if embeddings are already loaded\r\nlet guidanceembeddingsLoaded = false;  // Track if guidance embeddings are already loaded\r\n\r\n// Conversation Memory State\r\nlet sessionId = null;\r\nlet conversationHistory = [];  // {role: 'user'|'assistant', content: string, timestamp: number}\r\n\r\n// Authentication state\r\nlet userCredentials = null;\r\nlet currentUsername = null;\r\n\r\n// Initialize when Office is ready\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Excel) {\r\n        console.log('Office Add-in initialized');\r\n        checkAuthenticationAndInitialize();\r\n    }\r\n});\r\n\r\n/**\r\n * Check if user is authenticated before initializing\r\n */\r\nfunction checkAuthenticationAndInitialize() {\r\n    // Check for saved credentials\r\n    userCredentials = localStorage.getItem('userCredentials');\r\n    currentUsername = localStorage.getItem('username');\r\n\r\n    if (!userCredentials) {\r\n        // Not authenticated, redirect to login\r\n        console.log('No credentials found, redirecting to login');\r\n        window.location.href = 'login.html';\r\n        return;\r\n    }\r\n\r\n    // Verify credentials are still valid\r\n    verifyCredentials().then(valid => {\r\n        if (valid) {\r\n            console.log('Credentials valid, initializing app');\r\n            initializeAddin();\r\n        } else {\r\n            console.log('Credentials invalid, redirecting to login');\r\n            logout();\r\n        }\r\n    }).catch(error => {\r\n        console.error('Error verifying credentials:', error);\r\n        logout();\r\n    });\r\n}\r\n\r\n/**\r\n * Verify saved credentials with backend\r\n */\r\nasync function verifyCredentials() {\r\n    try {\r\n        const response = await fetch(`${BACKEND_URL}/api/login`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Basic ${userCredentials}`\r\n            }\r\n        });\r\n        return response.ok;\r\n    } catch (error) {\r\n        console.error('Verification error:', error);\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Logout and clear credentials\r\n */\r\nfunction logout() {\r\n    console.log('Logging out user...');\r\n    try {\r\n        localStorage.removeItem('userCredentials');\r\n        localStorage.removeItem('username');\r\n        localStorage.removeItem('userEmail');\r\n        sessionStorage.removeItem('chatSessionId');\r\n        sessionStorage.removeItem('conversationHistory');\r\n        console.log('Credentials cleared, redirecting to login page');\r\n        window.location.href = 'login.html';\r\n    } catch (error) {\r\n        console.error('Error during logout cleanup:', error);\r\n        // Still try to redirect even if cleanup fails\r\n        window.location.href = 'login.html';\r\n    }\r\n}\r\n\r\n/**\r\n * Initialize the add-in\r\n */\r\nasync function initializeAddin() {\r\n    // Initialize session\r\n    initializeSession();\r\n\r\n    // Display user info\r\n    displayUserInfo();\r\n\r\n    // Set up event listeners\r\n    document.getElementById('send-btn').addEventListener('click', handleSendMessage);\r\n    document.getElementById('user-input').addEventListener('keypress', (e) => {\r\n        if (e.key === 'Enter' && !isProcessing) {\r\n            handleSendMessage();\r\n        }\r\n    });\r\n    document.getElementById('clear-chat-btn').addEventListener('click', clearConversation);\r\n    document.getElementById('logout-btn').addEventListener('click', handleLogout);\r\n\r\n    // Dropdown menu toggle\r\n    const menuToggle = document.getElementById('menu-toggle');\r\n    const dropdownContent = document.getElementById('dropdown-content');\r\n\r\n    menuToggle.addEventListener('click', (e) => {\r\n        e.stopPropagation();\r\n        dropdownContent.classList.toggle('show');\r\n    });\r\n\r\n    // Close dropdown when clicking outside\r\n    document.addEventListener('click', (e) => {\r\n        if (!menuToggle.contains(e.target) && !dropdownContent.contains(e.target)) {\r\n            dropdownContent.classList.remove('show');\r\n        }\r\n    });\r\n\r\n    // Show welcome message\r\n    const username = localStorage.getItem('username') || 'User';\r\n    addMessage(`Welcome ${username}! I'll help you analyze your Excel data.`, 'assistant');\r\n\r\n    // Load both sheets and show a single consolidated message\r\n    await loadAllSheets();\r\n}\r\n\r\n/**\r\n * Display user information in header\r\n */\r\nfunction displayUserInfo() {\r\n    const userInfo = document.getElementById('user-info');\r\n    const username = localStorage.getItem('username') || 'User';\r\n    if (userInfo) {\r\n        userInfo.textContent = `Logged in as: ${username}`;\r\n        userInfo.style.display = 'block';\r\n    }\r\n}\r\n\r\n/**\r\n * Handle logout\r\n */\r\nasync function handleLogout() {\r\n    console.log('Logout button clicked');\r\n    try {\r\n        const confirmed = confirm('Are you sure you want to logout?');\r\n        console.log('Confirmation result:', confirmed);\r\n        if (confirmed) {\r\n            logout();\r\n        }\r\n    } catch (error) {\r\n        console.error('Error during logout:', error);\r\n        // Force logout even if there's an error\r\n        logout();\r\n    }\r\n}\r\n\r\n/**\r\n * Initialize or restore conversation session\r\n */\r\nfunction initializeSession() {\r\n    // Try to restore session from sessionStorage\r\n    const savedSessionId = sessionStorage.getItem('chatSessionId');\r\n    const savedHistory = sessionStorage.getItem('conversationHistory');\r\n\r\n    if (savedSessionId && savedHistory) {\r\n        sessionId = savedSessionId;\r\n        try {\r\n            conversationHistory = JSON.parse(savedHistory);\r\n            console.log(`Restored session: ${sessionId} with ${conversationHistory.length} messages`);\r\n            updateContextIndicator();\r\n\r\n            // Restore messages in UI (skip welcome message)\r\n            conversationHistory.forEach(msg => {\r\n                if (msg.content && msg.role) {\r\n                    addMessage(msg.content, msg.role);\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error('Failed to restore history:', e);\r\n            createNewSession();\r\n        }\r\n    } else {\r\n        createNewSession();\r\n    }\r\n}\r\n\r\n/**\r\n * Create a new conversation session\r\n */\r\nfunction createNewSession() {\r\n    sessionId = generateUUID();\r\n    conversationHistory = [];\r\n    sessionStorage.setItem('chatSessionId', sessionId);\r\n    sessionStorage.setItem('conversationHistory', JSON.stringify([]));\r\n    console.log(`Created new session: ${sessionId}`);\r\n    updateContextIndicator();\r\n}\r\n\r\n/**\r\n * Generate a UUID for session identification\r\n */\r\nfunction generateUUID() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        const r = Math.random() * 16 | 0;\r\n        const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\n/**\r\n * Sanitize error messages to hide internal system details\r\n */\r\nfunction sanitizeErrorMessage(errorMessage) {\r\n    if (!errorMessage || typeof errorMessage !== 'string') {\r\n        return 'Processing error occurred. Please try again.';\r\n    }\r\n\r\n    const message = errorMessage.toLowerCase();\r\n\r\n    // Check for Gemini-specific errors\r\n    if (message.includes('gemini') ||\r\n        message.includes('google') ||\r\n        message.includes('generative') ||\r\n        message.includes('model') ||\r\n        message.includes('api key') ||\r\n        message.includes('quota') ||\r\n        message.includes('rate limit') ||\r\n        message.includes('safety') ||\r\n        message.includes('blocked') ||\r\n        message.includes('function call') ||\r\n        message.includes('tool')) {\r\n        return 'InSync AI processing error. Please try again later or rephrasing your question.';\r\n    }\r\n\r\n    // Check for backend/server errors\r\n    if (message.includes('server') ||\r\n        message.includes('backend') ||\r\n        message.includes('fastapi') ||\r\n        message.includes('internal server error') ||\r\n        message.includes('500') ||\r\n        message.includes('503') ||\r\n        message.includes('timeout')) {\r\n        return 'Service temporarily unavailable. Please try again in a moment.';\r\n    }\r\n\r\n    // Check for network/connection errors\r\n    if (message.includes('network') ||\r\n        message.includes('connection') ||\r\n        message.includes('fetch') ||\r\n        message.includes('cors') ||\r\n        message.includes('refused')) {\r\n        return 'Connection error. Please check your network and try again.';\r\n    }\r\n\r\n    // Check for authentication/permission errors\r\n    if (message.includes('unauthorized') ||\r\n        message.includes('forbidden') ||\r\n        message.includes('401') ||\r\n        message.includes('403')) {\r\n        return 'Access denied. Please contact support.';\r\n    }\r\n\r\n    // Check for data/parsing errors\r\n    if (message.includes('json') ||\r\n        message.includes('parse') ||\r\n        message.includes('syntax') ||\r\n        message.includes('invalid')) {\r\n        return 'Data processing error. Please try again.';\r\n    }\r\n\r\n    // For any other specific technical terms, use generic message\r\n    if (message.includes('exception') ||\r\n        message.includes('traceback') ||\r\n        message.includes('error:') ||\r\n        message.includes('failed to')) {\r\n        return 'Processing error occurred. Please try again.';\r\n    }\r\n\r\n    // If error message is very long (likely technical), shorten it\r\n    if (errorMessage.length > 100) {\r\n        return 'InSync AI encountered an issue. Please try again later or rephrasing your question.';\r\n    }\r\n\r\n    // Return original message if it seems user-friendly\r\n    return errorMessage;\r\n}\r\n\r\n/**\r\n * Update context indicator in UI\r\n */\r\nfunction updateContextIndicator() {\r\n    const indicator = document.getElementById('context-indicator');\r\n    if (indicator) {\r\n        const messageCount = conversationHistory.length;\r\n        if (messageCount > 0) {\r\n            indicator.textContent = `${messageCount} messages`;\r\n            indicator.style.display = 'block';\r\n        } else {\r\n            indicator.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Save conversation history to sessionStorage\r\n */\r\nfunction saveConversationHistory() {\r\n    try {\r\n        sessionStorage.setItem('conversationHistory', JSON.stringify(conversationHistory));\r\n    } catch (e) {\r\n        console.error('Failed to save conversation history:', e);\r\n    }\r\n}\r\n\r\n/**\r\n * Clear conversation and start fresh (keeps embeddings)\r\n */\r\nasync function clearConversation() {\r\n    try {\r\n        updateStatus('Clearing chat history...', 'info');\r\n\r\n        // Reset server session (clears chat, keeps embeddings)\r\n        try {\r\n            const response = await fetch(`${BACKEND_URL}/api/session/reset`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${userCredentials}`\r\n                },\r\n                body: JSON.stringify({ sessionId: sessionId })\r\n            });\r\n            const result = await response.json();\r\n            console.log('Session reset:', result.message);\r\n            console.log('Embeddings preserved:', result.embeddingsPreserved);\r\n        } catch (e) {\r\n            console.warn('Could not reset server session:', e);\r\n        }\r\n\r\n        // Clear UI\r\n        const container = document.getElementById('chat-container');\r\n        container.innerHTML = '';\r\n\r\n        // Clear local conversation history (but keep sessionId - same session continues)\r\n        conversationHistory = [];\r\n        saveConversationHistory();\r\n        updateContextIndicator();\r\n\r\n        // Note: embeddings are still loaded, no need to reload\r\n\r\n        // Show welcome message\r\n        addMessage('Chat history cleared. Embeddings preserved. How can I help you?', 'assistant');\r\n        updateStatus('Ready - Chat cleared', 'success');\r\n\r\n    } catch (error) {\r\n        console.error('Error clearing conversation:', error);\r\n        const sanitizedError = sanitizeErrorMessage(error.message);\r\n        updateStatus(`Error: ${sanitizedError}`, 'error');\r\n    }\r\n}\r\n\r\n/**\r\n * Load all sheets (InSync API and Guidance) and show one consolidated message\r\n */\r\nasync function loadAllSheets() {\r\n    try {\r\n        updateStatus('Loading data sheets...', 'info');\r\n\r\n        // Load both sheets silently\r\n        const inSyncResult = await loadInSyncAPISheet();\r\n        const guidanceResult = await loadGuidanceSheet();\r\n\r\n        // Check if at least one succeeded\r\n        if (inSyncResult || guidanceResult) {\r\n            isReady = true;\r\n            updateStatus('Ready! All data loaded', 'success');\r\n            addMessage('Data embeddings loaded successfully. What would you like to know?', 'assistant');\r\n            enableInput();\r\n        } else {\r\n            throw new Error('Failed to load data sheets');\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('Error loading sheets:', error);\r\n        updateStatus('Failed to load data', 'error');\r\n        const sanitizedError = sanitizeErrorMessage(error.message);\r\n        addMessage(`Error: ${sanitizedError}`, 'error');\r\n    }\r\n}\r\n\r\n/**\r\n * Load InSync API sheet and create embeddings (silent version)\r\n */\r\nasync function loadInSyncAPISheet() {\r\n    // Skip if embeddings are already loaded\r\n    if (embeddingsLoaded) {\r\n        console.log('InSync API embeddings already loaded, skipping...');\r\n        return true;\r\n    }\r\n\r\n    try {\r\n        console.log('Loading InSync API sheet...');\r\n\r\n        await Excel.run(async (context) => {\r\n            // Get the worksheet\r\n            const sheets = context.workbook.worksheets;\r\n            sheets.load('items/name');\r\n            await context.sync();\r\n\r\n            // Find InSync API sheet\r\n            const inSyncSheet = sheets.items.find(sheet => sheet.name === SHEET_NAME);\r\n\r\n            if (!inSyncSheet) {\r\n                throw new Error(`Sheet \"${SHEET_NAME}\" not found. Please ensure you have a sheet named \"${SHEET_NAME}\".`);\r\n            }\r\n\r\n            // Find Model sheet to get ticker from A1\r\n            const modelSheet = sheets.items.find(sheet => sheet.name === 'Model');\r\n            let ticker = null;\r\n\r\n            if (modelSheet) {\r\n                const tickerCell = modelSheet.getRange('A1');\r\n                tickerCell.load('values');\r\n                await context.sync();\r\n\r\n                ticker = tickerCell.values[0][0];\r\n                if (ticker && typeof ticker === 'string' && ticker.trim() !== '') {\r\n                    ticker = ticker.trim().toUpperCase();\r\n                    console.log(`Found ticker: ${ticker}`);\r\n                } else {\r\n                    ticker = null;\r\n                    console.log('No ticker found in Model!A1');\r\n                }\r\n            } else {\r\n                console.log('Model sheet not found, proceeding without ticker');\r\n            }\r\n\r\n            // Get the used range\r\n            const usedRange = inSyncSheet.getUsedRange();\r\n            usedRange.load(['values', 'address']);\r\n            await context.sync();\r\n\r\n            const data = usedRange.values;\r\n            const address = usedRange.address;\r\n\r\n            console.log(`Read ${data.length} rows from ${SHEET_NAME}`);\r\n\r\n            // Extract headers (row 7, index 6)\r\n            const headers = data[6] || [];\r\n\r\n            const response = await fetch(`${BACKEND_URL}/api/embeddings/create-from-data?session_id=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${userCredentials}`\r\n                },\r\n                body: JSON.stringify({\r\n                    worksheetName: SHEET_NAME,\r\n                    data: data,\r\n                    headers: headers,\r\n                    ticker: ticker,  // Pass ticker from Model!A1\r\n                    metadata: {\r\n                        totalRows: data.length,\r\n                        totalCols: headers.length,\r\n                        address: address\r\n                    }\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const error = await response.json();\r\n                const errorMessage = error.detail || 'Failed to create embeddings';\r\n                throw new Error(sanitizeErrorMessage(errorMessage));\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log('InSync API embeddings result:', result);\r\n\r\n            // Success!\r\n            embeddingsLoaded = true;  // Mark embeddings as loaded\r\n        });\r\n\r\n        // Return true if we got here without errors\r\n        return true;\r\n\r\n    } catch (error) {\r\n        console.error('Error loading InSync API sheet:', error);\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nasync function loadGuidanceSheet() {\r\n    // Skip if embeddings are already loaded\r\n    if (guidanceembeddingsLoaded) {\r\n        console.log('Guidance embeddings already loaded, skipping...');\r\n        return true;\r\n    }\r\n\r\n    try {\r\n        console.log('Loading Guidance sheet...');\r\n\r\n        await Excel.run(async (context) => {\r\n            // Get the worksheet\r\n            const sheets = context.workbook.worksheets;\r\n            sheets.load('items/name');\r\n            await context.sync();\r\n\r\n            // Find InSync API sheet\r\n            const inSyncSheet = sheets.items.find(sheet => sheet.name === GUIDANCE_SHEET);\r\n\r\n            if (!inSyncSheet) {\r\n                throw new Error(`Sheet \"${GUIDANCE_SHEET}\" not found. Please ensure you have a sheet named \"${GUIDANCE_SHEET}\".`);\r\n            }\r\n\r\n            // Find Model sheet to get ticker from A1\r\n            const modelSheet = sheets.items.find(sheet => sheet.name === 'Model');\r\n            let ticker = null;\r\n\r\n            if (modelSheet) {\r\n                const tickerCell = modelSheet.getRange('A1');\r\n                tickerCell.load('values');\r\n                await context.sync();\r\n\r\n                ticker = tickerCell.values[0][0];\r\n                if (ticker && typeof ticker === 'string' && ticker.trim() !== '') {\r\n                    ticker = ticker.trim().toUpperCase();\r\n                    console.log(`Found ticker: ${ticker}`);\r\n                } else {\r\n                    ticker = null;\r\n                    console.log('No ticker found in Model!A1');\r\n                }\r\n            } else {\r\n                console.log('Model sheet not found, proceeding without ticker');\r\n            }\r\n\r\n            // Get the used range\r\n            const usedRange = inSyncSheet.getUsedRange();\r\n            usedRange.load(['values', 'address']);\r\n            await context.sync();\r\n\r\n            const data = usedRange.values;\r\n            const address = usedRange.address;\r\n\r\n            console.log(`Read ${data.length} rows from ${GUIDANCE_SHEET}`);\r\n\r\n            // Extract headers (row 7, index 6)\r\n            const headers = data[6] || [];\r\n\r\n            const response = await fetch(`${BACKEND_URL}/api/embeddings/create-from-data?session_id=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Basic ${userCredentials}`\r\n                },\r\n                body: JSON.stringify({\r\n                    worksheetName: GUIDANCE_SHEET,\r\n                    data: data,\r\n                    headers: headers,\r\n                    ticker: ticker,  // Pass ticker from Model!A1\r\n                    metadata: {\r\n                        totalRows: data.length,\r\n                        totalCols: headers.length,\r\n                        address: address\r\n                    }\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const error = await response.json();\r\n                const errorMessage = error.detail || 'Failed to create embeddings';\r\n                throw new Error(sanitizeErrorMessage(errorMessage));\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log('Guidance embeddings result:', result);\r\n\r\n            // Success!\r\n            guidanceembeddingsLoaded = true;  // Mark embeddings as loaded\r\n        });\r\n\r\n        // Return true if we got here without errors\r\n        return true;\r\n\r\n    } catch (error) {\r\n        console.error('Error loading Guidance sheet:', error);\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Handle send message\r\n */\r\nasync function handleSendMessage() {\r\n    if (isProcessing || !isReady) return;\r\n\r\n    const input = document.getElementById('user-input');\r\n    const message = input.value.trim();\r\n\r\n    if (!message) return;\r\n\r\n    // Clear input\r\n    input.value = '';\r\n\r\n    // Add user message\r\n    addMessage(message, 'user');\r\n\r\n    // Add to conversation history\r\n    const userMessage = {\r\n        role: 'user',\r\n        content: message,\r\n        timestamp: Date.now()\r\n    };\r\n    conversationHistory.push(userMessage);\r\n    saveConversationHistory();\r\n    updateContextIndicator();\r\n\r\n    // Process\r\n    isProcessing = true;\r\n    disableInput();\r\n    showLoading(true);\r\n    updateStatus('Analyzing...', 'info');\r\n\r\n    try {\r\n        // Get chart toggle state\r\n        const enableCharts = document.getElementById('chart-toggle').checked;\r\n        console.log(`📊 Charts toggle state: ${enableCharts}`);\r\n\r\n        // Call backend API with sessionId\r\n        const response = await fetch(`${BACKEND_URL}/api/chat`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Basic ${userCredentials}`\r\n            },\r\n            body: JSON.stringify({\r\n                question: message,\r\n                sessionId: sessionId,  // Include session ID\r\n                excelData: {\r\n                    worksheetName: SHEET_NAME,\r\n                    data: [],\r\n                    headers: []\r\n                },\r\n                conversationHistory: conversationHistory,  // Send full history for context\r\n                enableCharts: enableCharts\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            const errorMessage = error.detail || 'Request failed';\r\n            throw new Error(sanitizeErrorMessage(errorMessage));\r\n        }\r\n\r\n        const result = await response.json();\r\n        console.log('Response:', result);\r\n\r\n        // Display answer\r\n        addMessage(result.answer, 'assistant');\r\n\r\n        // Add assistant response to conversation history\r\n        const assistantMessage = {\r\n            role: 'assistant',\r\n            content: result.answer,\r\n            timestamp: Date.now(),\r\n            hasChart: result.hasChart || false\r\n        };\r\n        conversationHistory.push(assistantMessage);\r\n        saveConversationHistory();\r\n        updateContextIndicator();\r\n\r\n        // Display chart if available\r\n        if (result.hasChart && result.chartHtml) {\r\n            addChartMessage(result.chartHtml);\r\n        }\r\n\r\n        // Update context indicator if server returned contextLength\r\n        if (result.contextLength !== undefined) {\r\n            console.log(`Server context length: ${result.contextLength} messages`);\r\n        }\r\n\r\n        updateStatus('Ready', 'success');\r\n\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        const sanitizedError = sanitizeErrorMessage(error.message);\r\n        addMessage(`Error: ${sanitizedError}`, 'error');\r\n        updateStatus('Error occurred', 'error');\r\n    } finally {\r\n        isProcessing = false;\r\n        enableInput();\r\n        showLoading(false);\r\n        input.focus();\r\n    }\r\n}\r\n\r\n/**\r\n * Parse markdown to HTML\r\n * Preserves UTF-8 characters properly to avoid mojibake\r\n */\r\nfunction parseMarkdown(text) {\r\n    // Convert markdown to HTML\r\n    let html = text;\r\n\r\n    // Code blocks (```code```)\r\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\r\n        return `<pre><code class=\"language-${lang || 'text'}\">${escapeHtml(code.trim())}</code></pre>`;\r\n    });\r\n\r\n    // Inline code (`code`)\r\n    html = html.replace(/`([^`]+)`/g, (match, code) => {\r\n        return `<code>${code}</code>`;\r\n    });\r\n\r\n    // Bold (**text** or __text__)\r\n    html = html.replace(/\\*\\*([^*]+?)\\*\\*/g, (match, text) => {\r\n        return `<strong>${text}</strong>`;\r\n    });\r\n    html = html.replace(/__([^_]+?)__/g, (match, text) => {\r\n        return `<strong>${text}</strong>`;\r\n    });\r\n\r\n    // Italic (*text* or _text_) - must have space or word boundary before/after\r\n    html = html.replace(/(\\s|^)\\*([^\\s*][^*]*?)\\*(\\s|$|[.,!?;:])/g, (match, before, text, after) => {\r\n        return `${before}<em>${text}</em>${after}`;\r\n    });\r\n    html = html.replace(/(\\s|^)_([^\\s_][^_]*?)_(\\s|$|[.,!?;:])/g, (match, before, text, after) => {\r\n        return `${before}<em>${text}</em>${after}`;\r\n    });\r\n\r\n    // Headers\r\n    html = html.replace(/^### (.+)$/gm, (match, text) => {\r\n        return `<h3>${text}</h3>`;\r\n    });\r\n    html = html.replace(/^## (.+)$/gm, (match, text) => {\r\n        return `<h2>${text}</h2>`;\r\n    });\r\n    html = html.replace(/^# (.+)$/gm, (match, text) => {\r\n        return `<h1>${text}</h1>`;\r\n    });\r\n\r\n    // Lists (unordered) - use callback to preserve UTF-8\r\n    html = html.replace(/^\\* (.+)$/gm, (match, text) => {\r\n        return `<li>${text}</li>`;\r\n    });\r\n    html = html.replace(/^- (.+)$/gm, (match, text) => {\r\n        return `<li>${text}</li>`;\r\n    });\r\n\r\n    // Wrap consecutive <li> in <ul>\r\n    html = html.replace(/(<li>.*<\\/li>\\n?)+/g, (match) => {\r\n        return `<ul>${match}</ul>`;\r\n    });\r\n\r\n    // Lists (ordered)\r\n    html = html.replace(/^\\d+\\. (.+)$/gm, (match, text) => {\r\n        return `<li>${text}</li>`;\r\n    });\r\n\r\n    // Links [text](url)\r\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, url) => {\r\n        return `<a href=\"${url}\" target=\"_blank\">${text}</a>`;\r\n    });\r\n\r\n    // Line breaks\r\n    html = html.replace(/\\n\\n/g, '</p><p>');\r\n    html = html.replace(/\\n/g, '<br>');\r\n\r\n    // Wrap in paragraph\r\n    html = `<p>${html}</p>`;\r\n\r\n    // Clean up empty paragraphs\r\n    html = html.replace(/<p><\\/p>/g, '');\r\n    html = html.replace(/<p>(<h[123]>)/g, '$1');\r\n    html = html.replace(/(<\\/h[123]>)<\\/p>/g, '$1');\r\n    html = html.replace(/<p>(<pre>)/g, '$1');\r\n    html = html.replace(/(<\\/pre>)<\\/p>/g, '$1');\r\n    html = html.replace(/<p>(<ul>)/g, '$1');\r\n    html = html.replace(/(<\\/ul>)<\\/p>/g, '$1');\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * Escape HTML special characters\r\n */\r\nfunction escapeHtml(text) {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n}\r\n\r\n/**\r\n * Add a message to the chat\r\n */\r\nfunction addMessage(text, type) {\r\n    const container = document.getElementById('chat-container');\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = `message message-${type}`;\r\n\r\n    const contentDiv = document.createElement('div');\r\n    contentDiv.className = 'message-content';\r\n\r\n    // Parse markdown for assistant messages\r\n    if (type === 'assistant') {\r\n        contentDiv.innerHTML = parseMarkdown(text);\r\n    } else {\r\n        contentDiv.textContent = text;\r\n    }\r\n\r\n    messageDiv.appendChild(contentDiv);\r\n    container.appendChild(messageDiv);\r\n\r\n    // Scroll to bottom\r\n    container.scrollTop = container.scrollHeight;\r\n}\r\n\r\n/**\r\n * Add a chart message\r\n */\r\nfunction addChartMessage(chartHtml) {\r\n    const container = document.getElementById('chat-container');\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = 'message message-chart';\r\n\r\n    const chartDiv = document.createElement('div');\r\n    chartDiv.className = 'chart-container';\r\n\r\n    // Generate a unique ID for this chart to avoid conflicts\r\n    const uniqueId = 'plotly-chart-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\r\n\r\n    // Extract just the div content from the full HTML if needed\r\n    // Plotly returns full HTML page, we need to extract the chart div\r\n    try {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(chartHtml, 'text/html');\r\n\r\n        // Find the plotly chart div\r\n        let plotlyDiv = doc.querySelector('div[id^=\"plotly-chart\"]') || doc.querySelector('div');\r\n\r\n        if (plotlyDiv) {\r\n            // Clone the div\r\n            plotlyDiv = plotlyDiv.cloneNode(true);\r\n            \r\n            // Update the ID to be unique\r\n            plotlyDiv.id = uniqueId;\r\n\r\n            chartDiv.appendChild(plotlyDiv);\r\n\r\n            // Also copy and update scripts (Plotly needs them, and they reference the old ID)\r\n            const scripts = doc.querySelectorAll('script');\r\n            scripts.forEach(script => {\r\n                let scriptContent = script.textContent || '';\r\n                const newScript = document.createElement('script');\r\n                \r\n                if (script.src) {\r\n                    newScript.src = script.src;\r\n                } else {\r\n                    // Replace references to the old ID in inline script content\r\n                    const oldId = 'plotly-chart'; // Assuming this is the fixed ID from Python\r\n                    scriptContent = scriptContent.replace(new RegExp(oldId, 'g'), uniqueId);\r\n                    newScript.textContent = scriptContent;\r\n                }\r\n                \r\n                chartDiv.appendChild(newScript);\r\n                console.log(\"Added script for chart ID:\", uniqueId);\r\n            });\r\n        } else {\r\n            // Fallback: just insert as-is (but still update if possible)\r\n            chartDiv.innerHTML = chartHtml.replace(/plotly-chart/g, uniqueId);\r\n            console.log(\"Plotly div not found, inserted raw HTML with updated ID:\", uniqueId);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error parsing chart HTML:', error);\r\n        // Fallback: just insert as-is with ID replacement\r\n        chartDiv.innerHTML = chartHtml.replace(/plotly-chart/g, uniqueId);\r\n    }\r\n\r\n    messageDiv.appendChild(chartDiv);\r\n    container.appendChild(messageDiv);\r\n\r\n    // Scroll to bottom\r\n    container.scrollTop = container.scrollHeight;\r\n}\r\n\r\n/**\r\n * Update status bar\r\n */\r\nfunction updateStatus(text, type) {\r\n    const status = document.getElementById('status');\r\n    status.textContent = text;\r\n    status.className = `status status-${type}`;\r\n}\r\n\r\n/**\r\n * Enable/disable input\r\n */\r\nfunction enableInput() {\r\n    document.getElementById('user-input').disabled = false;\r\n    document.getElementById('send-btn').disabled = false;\r\n}\r\n\r\nfunction disableInput() {\r\n    document.getElementById('user-input').disabled = true;\r\n    document.getElementById('send-btn').disabled = true;\r\n}\r\n\r\n/**\r\n * Show/hide loading indicator\r\n */\r\nfunction showLoading(show) {\r\n    const loading = document.getElementById('loading');\r\n    loading.style.display = show ? 'flex' : 'none';\r\n}\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Excel Chatbot</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\"/> </head> <body> <div class=\\\"container\\\"> <header class=\\\"header\\\"> <div class=\\\"header-left\\\"> <img src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"InSync Nexus\\\" class=\\\"header-logo\\\"/> <h1>InSync Nexus</h1> </div> <div class=\\\"header-right\\\"> <div id=\\\"user-info\\\" class=\\\"user-info\\\" style=\\\"display:none\\\"></div> <div id=\\\"status\\\" class=\\\"status\\\">Initializing...</div> <div id=\\\"context-indicator\\\" class=\\\"context-indicator\\\" style=\\\"display:none\\\"></div> <div class=\\\"dropdown-menu\\\"> <button class=\\\"dropdown-toggle\\\" id=\\\"menu-toggle\\\"> <span class=\\\"menu-icon\\\">⋮</span> </button> <div class=\\\"dropdown-content\\\" id=\\\"dropdown-content\\\"> <label class=\\\"dropdown-item toggle-label\\\"> <input type=\\\"checkbox\\\" id=\\\"chart-toggle\\\" checked=\\\"checked\\\"/> <span class=\\\"toggle-text\\\">Charts</span> <div class=\\\"charts-info-tooltip\\\"> <div class=\\\"charts-info-content\\\"> <div class=\\\"charts-info-title\\\">Chart Generation</div> <div class=\\\"charts-info-text\\\"> Charts are automatically generated when prompts are suitable for visualization and provide better insights than text alone. </div> <div class=\\\"charts-types-list\\\"> <strong>Available Chart Types for InSync AI Agent:</strong><br> • <strong>Line Charts</strong> - For trends over time periods<br> • <strong>Bar Charts</strong> - For value comparisons<br> • <strong>Comparison Bar</strong> - For multi-metric analysis<br> • <strong>Area Charts</strong> - For cumulative data<br> • <strong>Waterfall Charts</strong> - For sequential changes </div> </div> </div> </label> <div class=\\\"dropdown-divider\\\"></div> <button id=\\\"clear-chat-btn\\\" class=\\\"dropdown-item clear-chat-btn\\\"> <span>Clear Chat</span> <div class=\\\"clear-info-tooltip\\\"> <div class=\\\"clear-info-content\\\"> We recommend clearing chats whenever previous context is no longer required for your analysis </div> </div> </button> <div class=\\\"dropdown-divider\\\"></div> <button id=\\\"logout-btn\\\" class=\\\"dropdown-item logout-btn\\\">Logout</button> </div> </div> </div> </header> <div id=\\\"chat-container\\\" class=\\\"chat-container\\\"> </div> <div class=\\\"input-area\\\"> <input type=\\\"text\\\" id=\\\"user-input\\\" placeholder=\\\"Ask about your InSync API data...\\\" disabled=\\\"disabled\\\"/> <button id=\\\"send-btn\\\" disabled=\\\"disabled\\\">Send</button> </div> <div id=\\\"loading\\\" class=\\\"loading\\\" style=\\\"display:none\\\"> <div class=\\\"spinner\\\"></div> <span>Processing...</span> </div> </div> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","BACKEND_URL","SHEET_NAME","GUIDANCE_SHEET","isReady","isProcessing","embeddingsLoaded","guidanceembeddingsLoaded","sessionId","conversationHistory","userCredentials","_verifyCredentials","_callee","response","_t","_context","fetch","concat","method","headers","ok","console","error","logout","log","localStorage","removeItem","sessionStorage","_initializeAddin","_callee2","menuToggle","dropdownContent","username","_context2","initializeSession","displayUserInfo","getElementById","addEventListener","handleSendMessage","key","clearConversation","handleLogout","stopPropagation","classList","toggle","contains","target","remove","getItem","addMessage","loadAllSheets","userInfo","textContent","style","display","_handleLogout","_callee3","confirmed","_context3","confirm","savedSessionId","savedHistory","JSON","parse","updateContextIndicator","forEach","msg","content","role","createNewSession","Math","random","toString","setItem","stringify","sanitizeErrorMessage","errorMessage","message","toLowerCase","includes","indicator","messageCount","saveConversationHistory","_clearConversation","_callee4","result","sanitizedError","_t2","_t3","_context4","updateStatus","body","json","embeddingsPreserved","warn","innerHTML","_loadAllSheets","_callee5","inSyncResult","guidanceResult","_t4","_context5","loadInSyncAPISheet","loadGuidanceSheet","enableInput","_loadInSyncAPISheet","_callee7","_t5","_context7","Excel","run","_ref","_callee6","context","sheets","inSyncSheet","modelSheet","ticker","tickerCell","usedRange","data","address","_context6","workbook","worksheets","load","sync","items","find","sheet","name","getRange","values","trim","getUsedRange","worksheetName","metadata","totalRows","totalCols","detail","_x","_loadGuidanceSheet","_callee9","_t6","_context9","_ref2","_callee8","_context8","_x2","_handleSendMessage","_callee0","input","userMessage","enableCharts","assistantMessage","_t7","_context0","timestamp","Date","now","push","disableInput","showLoading","checked","question","excelData","answer","hasChart","chartHtml","addChartMessage","contextLength","focus","text","type","container","messageDiv","createElement","className","contentDiv","html","match","lang","code","div","escapeHtml","before","after","url","parseMarkdown","appendChild","scrollTop","scrollHeight","chartDiv","uniqueId","substr","doc","DOMParser","parseFromString","plotlyDiv","querySelector","cloneNode","id","querySelectorAll","script","scriptContent","newScript","RegExp","status","disabled","show","Office","onReady","info","host","HostType","verifyCredentials","valid","initializeAddin","catch","checkAuthenticationAndInitialize","URL"],"sourceRoot":""}