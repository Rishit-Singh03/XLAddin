{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/* global Office, Excel */\r\n\r\n/**\r\n * Simple Excel Chatbot Add-in\r\n * - Finds \"InSync API\" sheet\r\n * - Sends data to backend for embeddings\r\n * - Queries backend with RAG\r\n * - Displays answers and charts\r\n */\r\n\r\n// Configuration\r\nconst BACKEND_URL = 'https://insyncai.duckdns.org';  // Change if needed\r\nconst SHEET_NAME = 'InSync API';\r\n\r\n// State\r\nlet isReady = false;\r\nlet isProcessing = false;\r\nlet embeddingsLoaded = false;  // Track if embeddings are already loaded\r\n\r\n// Conversation Memory State\r\nlet sessionId = null;\r\nlet conversationHistory = [];  // {role: 'user'|'assistant', content: string, timestamp: number}\r\n\r\n// Initialize when Office is ready\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Excel) {\r\n        console.log('Office Add-in initialized');\r\n        initializeAddin();\r\n    }\r\n});\r\n\r\n/**\r\n * Initialize the add-in\r\n */\r\nasync function initializeAddin() {\r\n    // Initialize session\r\n    initializeSession();\r\n\r\n    // Set up event listeners\r\n    document.getElementById('send-btn').addEventListener('click', handleSendMessage);\r\n    document.getElementById('user-input').addEventListener('keypress', (e) => {\r\n        if (e.key === 'Enter' && !isProcessing) {\r\n            handleSendMessage();\r\n        }\r\n    });\r\n    document.getElementById('clear-chat-btn').addEventListener('click', clearConversation);\r\n\r\n    // Show welcome message\r\n    addMessage('Welcome! I\\'ll help you analyze your Excel data.', 'assistant');\r\n\r\n    // Load InSync API sheet\r\n    await loadInSyncAPISheet();\r\n}\r\n\r\n/**\r\n * Initialize or restore conversation session\r\n */\r\nfunction initializeSession() {\r\n    // Try to restore session from sessionStorage\r\n    const savedSessionId = sessionStorage.getItem('chatSessionId');\r\n    const savedHistory = sessionStorage.getItem('conversationHistory');\r\n\r\n    if (savedSessionId && savedHistory) {\r\n        sessionId = savedSessionId;\r\n        try {\r\n            conversationHistory = JSON.parse(savedHistory);\r\n            console.log(`Restored session: ${sessionId} with ${conversationHistory.length} messages`);\r\n            updateContextIndicator();\r\n\r\n            // Restore messages in UI (skip welcome message)\r\n            conversationHistory.forEach(msg => {\r\n                if (msg.content && msg.role) {\r\n                    addMessage(msg.content, msg.role);\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error('Failed to restore history:', e);\r\n            createNewSession();\r\n        }\r\n    } else {\r\n        createNewSession();\r\n    }\r\n}\r\n\r\n/**\r\n * Create a new conversation session\r\n */\r\nfunction createNewSession() {\r\n    sessionId = generateUUID();\r\n    conversationHistory = [];\r\n    sessionStorage.setItem('chatSessionId', sessionId);\r\n    sessionStorage.setItem('conversationHistory', JSON.stringify([]));\r\n    console.log(`Created new session: ${sessionId}`);\r\n    updateContextIndicator();\r\n}\r\n\r\n/**\r\n * Generate a UUID for session identification\r\n */\r\nfunction generateUUID() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n        const r = Math.random() * 16 | 0;\r\n        const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\n/**\r\n * Sanitize error messages to hide internal system details\r\n */\r\nfunction sanitizeErrorMessage(errorMessage) {\r\n    if (!errorMessage || typeof errorMessage !== 'string') {\r\n        return 'Processing error occurred. Please try again.';\r\n    }\r\n\r\n    const message = errorMessage.toLowerCase();\r\n\r\n    // Check for Gemini-specific errors\r\n    if (message.includes('gemini') ||\r\n        message.includes('google') ||\r\n        message.includes('generative') ||\r\n        message.includes('model') ||\r\n        message.includes('api key') ||\r\n        message.includes('quota') ||\r\n        message.includes('rate limit') ||\r\n        message.includes('safety') ||\r\n        message.includes('blocked') ||\r\n        message.includes('function call') ||\r\n        message.includes('tool')) {\r\n        return 'InSync AI processing error. Please try again later or rephrasing your question.';\r\n    }\r\n\r\n    // Check for backend/server errors\r\n    if (message.includes('server') ||\r\n        message.includes('backend') ||\r\n        message.includes('fastapi') ||\r\n        message.includes('internal server error') ||\r\n        message.includes('500') ||\r\n        message.includes('503') ||\r\n        message.includes('timeout')) {\r\n        return 'Service temporarily unavailable. Please try again in a moment.';\r\n    }\r\n\r\n    // Check for network/connection errors\r\n    if (message.includes('network') ||\r\n        message.includes('connection') ||\r\n        message.includes('fetch') ||\r\n        message.includes('cors') ||\r\n        message.includes('refused')) {\r\n        return 'Connection error. Please check your network and try again.';\r\n    }\r\n\r\n    // Check for authentication/permission errors\r\n    if (message.includes('unauthorized') ||\r\n        message.includes('forbidden') ||\r\n        message.includes('401') ||\r\n        message.includes('403')) {\r\n        return 'Access denied. Please contact support.';\r\n    }\r\n\r\n    // Check for data/parsing errors\r\n    if (message.includes('json') ||\r\n        message.includes('parse') ||\r\n        message.includes('syntax') ||\r\n        message.includes('invalid')) {\r\n        return 'Data processing error. Please try again.';\r\n    }\r\n\r\n    // For any other specific technical terms, use generic message\r\n    if (message.includes('exception') ||\r\n        message.includes('traceback') ||\r\n        message.includes('error:') ||\r\n        message.includes('failed to')) {\r\n        return 'Processing error occurred. Please try again.';\r\n    }\r\n\r\n    // If error message is very long (likely technical), shorten it\r\n    if (errorMessage.length > 100) {\r\n        return 'InSync AI encountered an issue. Please try again later or rephrasing your question.';\r\n    }\r\n\r\n    // Return original message if it seems user-friendly\r\n    return errorMessage;\r\n}\r\n\r\n/**\r\n * Update context indicator in UI\r\n */\r\nfunction updateContextIndicator() {\r\n    const indicator = document.getElementById('context-indicator');\r\n    if (indicator) {\r\n        const messageCount = conversationHistory.length;\r\n        if (messageCount > 0) {\r\n            indicator.textContent = `${messageCount} messages`;\r\n            indicator.style.display = 'block';\r\n        } else {\r\n            indicator.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Save conversation history to sessionStorage\r\n */\r\nfunction saveConversationHistory() {\r\n    try {\r\n        sessionStorage.setItem('conversationHistory', JSON.stringify(conversationHistory));\r\n    } catch (e) {\r\n        console.error('Failed to save conversation history:', e);\r\n    }\r\n}\r\n\r\n/**\r\n * Clear conversation and start fresh (keeps embeddings)\r\n */\r\nasync function clearConversation() {\r\n    try {\r\n        updateStatus('Clearing chat history...', 'info');\r\n\r\n        // Reset server session (clears chat, keeps embeddings)\r\n        try {\r\n            const response = await fetch(`${BACKEND_URL}/api/session/reset`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ sessionId: sessionId })\r\n            });\r\n            const result = await response.json();\r\n            console.log('Session reset:', result.message);\r\n            console.log('Embeddings preserved:', result.embeddingsPreserved);\r\n        } catch (e) {\r\n            console.warn('Could not reset server session:', e);\r\n        }\r\n\r\n        // Clear UI\r\n        const container = document.getElementById('chat-container');\r\n        container.innerHTML = '';\r\n\r\n        // Clear local conversation history (but keep sessionId - same session continues)\r\n        conversationHistory = [];\r\n        saveConversationHistory();\r\n        updateContextIndicator();\r\n\r\n        // Note: embeddings are still loaded, no need to reload\r\n\r\n        // Show welcome message\r\n        addMessage('Chat history cleared. Embeddings preserved. How can I help you?', 'assistant');\r\n        updateStatus('Ready - Chat cleared', 'success');\r\n\r\n    } catch (error) {\r\n        console.error('Error clearing conversation:', error);\r\n        const sanitizedError = sanitizeErrorMessage(error.message);\r\n        updateStatus(`Error: ${sanitizedError}`, 'error');\r\n    }\r\n}\r\n\r\n/**\r\n * Load InSync API sheet and create embeddings\r\n */\r\nasync function loadInSyncAPISheet() {\r\n    // Skip if embeddings are already loaded\r\n    if (embeddingsLoaded) {\r\n        console.log('Embeddings already loaded, skipping...');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        updateStatus('Looking for sheets...', 'info');\r\n\r\n        await Excel.run(async (context) => {\r\n            // Get the worksheet\r\n            const sheets = context.workbook.worksheets;\r\n            sheets.load('items/name');\r\n            await context.sync();\r\n\r\n            // Find InSync API sheet\r\n            const inSyncSheet = sheets.items.find(sheet => sheet.name === SHEET_NAME);\r\n\r\n            if (!inSyncSheet) {\r\n                throw new Error(`Sheet \"${SHEET_NAME}\" not found. Please ensure you have a sheet named \"${SHEET_NAME}\".`);\r\n            }\r\n\r\n            // Find Model sheet to get ticker from A1\r\n            const modelSheet = sheets.items.find(sheet => sheet.name === 'Model');\r\n            let ticker = null;\r\n\r\n            if (modelSheet) {\r\n                updateStatus('Reading ticker from Model sheet...', 'info');\r\n                const tickerCell = modelSheet.getRange('A1');\r\n                tickerCell.load('values');\r\n                await context.sync();\r\n\r\n                ticker = tickerCell.values[0][0];\r\n                if (ticker && typeof ticker === 'string' && ticker.trim() !== '') {\r\n                    ticker = ticker.trim().toUpperCase();\r\n                    console.log(`Found ticker: ${ticker}`);\r\n                } else {\r\n                    ticker = null;\r\n                    console.log('No ticker found in Model!A1');\r\n                }\r\n            } else {\r\n                console.log('Model sheet not found, proceeding without ticker');\r\n            }\r\n\r\n            updateStatus('Reading InSync API sheet...', 'info');\r\n\r\n            // Get the used range\r\n            const usedRange = inSyncSheet.getUsedRange();\r\n            usedRange.load(['values', 'address']);\r\n            await context.sync();\r\n\r\n            const data = usedRange.values;\r\n            const address = usedRange.address;\r\n\r\n            console.log(`Read ${data.length} rows from ${SHEET_NAME}`);\r\n\r\n            // Extract headers (row 7, index 6)\r\n            const headers = data[6] || [];\r\n\r\n            // Send to backend to create embeddings (link to session)\r\n            if (ticker) {\r\n                updateStatus(`Checking for pre-built embeddings (${ticker})...`, 'info');\r\n            } else {\r\n                updateStatus('Creating embeddings...', 'info');\r\n            }\r\n\r\n            const response = await fetch(`${BACKEND_URL}/api/embeddings/create-from-data?session_id=${sessionId}`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    worksheetName: SHEET_NAME,\r\n                    data: data,\r\n                    headers: headers,\r\n                    ticker: ticker,  // Pass ticker from Model!A1\r\n                    metadata: {\r\n                        totalRows: data.length,\r\n                        totalCols: headers.length,\r\n                        address: address\r\n                    }\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const error = await response.json();\r\n                const errorMessage = error.detail || 'Failed to create embeddings';\r\n                throw new Error(sanitizeErrorMessage(errorMessage));\r\n            }\r\n\r\n            const result = await response.json();\r\n            console.log('Embeddings result:', result);\r\n\r\n            // Success!\r\n            isReady = true;\r\n            embeddingsLoaded = true;  // Mark embeddings as loaded\r\n\r\n            // Show unified message regardless of whether embeddings were loaded from storage\r\n            updateStatus(`Ready! Loaded ${result.lineItemCount} metrics, ${result.columnCount} periods`, 'success');\r\n            addMessage(`I've loaded your InSync API data with ${result.lineItemCount} line items and ${result.columnCount} time periods. What would you like to know?`, 'assistant');\r\n\r\n            enableInput();\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Error loading sheet:', error);\r\n        updateStatus('Failed to load data', 'error');\r\n        const sanitizedError = sanitizeErrorMessage(error.message);\r\n        addMessage(`Error: ${sanitizedError}`, 'error');\r\n    }\r\n}\r\n\r\n/**\r\n * Handle send message\r\n */\r\nasync function handleSendMessage() {\r\n    if (isProcessing || !isReady) return;\r\n\r\n    const input = document.getElementById('user-input');\r\n    const message = input.value.trim();\r\n\r\n    if (!message) return;\r\n\r\n    // Clear input\r\n    input.value = '';\r\n\r\n    // Add user message\r\n    addMessage(message, 'user');\r\n\r\n    // Add to conversation history\r\n    const userMessage = {\r\n        role: 'user',\r\n        content: message,\r\n        timestamp: Date.now()\r\n    };\r\n    conversationHistory.push(userMessage);\r\n    saveConversationHistory();\r\n    updateContextIndicator();\r\n\r\n    // Process\r\n    isProcessing = true;\r\n    disableInput();\r\n    showLoading(true);\r\n    updateStatus('Analyzing...', 'info');\r\n\r\n    try {\r\n        // Get chart toggle state\r\n        const enableCharts = document.getElementById('chart-toggle').checked;\r\n        console.log(`📊 Charts toggle state: ${enableCharts}`);\r\n\r\n        // Call backend API with sessionId\r\n        const response = await fetch(`${BACKEND_URL}/api/chat`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                question: message,\r\n                sessionId: sessionId,  // Include session ID\r\n                excelData: {\r\n                    worksheetName: SHEET_NAME,\r\n                    data: [],\r\n                    headers: []\r\n                },\r\n                conversationHistory: conversationHistory,  // Send full history for context\r\n                enableCharts: enableCharts\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            const errorMessage = error.detail || 'Request failed';\r\n            throw new Error(sanitizeErrorMessage(errorMessage));\r\n        }\r\n\r\n        const result = await response.json();\r\n        console.log('Response:', result);\r\n\r\n        // Display answer\r\n        addMessage(result.answer, 'assistant');\r\n\r\n        // Add assistant response to conversation history\r\n        const assistantMessage = {\r\n            role: 'assistant',\r\n            content: result.answer,\r\n            timestamp: Date.now(),\r\n            hasChart: result.hasChart || false\r\n        };\r\n        conversationHistory.push(assistantMessage);\r\n        saveConversationHistory();\r\n        updateContextIndicator();\r\n\r\n        // Display chart if available\r\n        if (result.hasChart && result.chartHtml) {\r\n            addChartMessage(result.chartHtml);\r\n        }\r\n\r\n        // Update context indicator if server returned contextLength\r\n        if (result.contextLength !== undefined) {\r\n            console.log(`Server context length: ${result.contextLength} messages`);\r\n        }\r\n\r\n        updateStatus('Ready', 'success');\r\n\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n        const sanitizedError = sanitizeErrorMessage(error.message);\r\n        addMessage(`Error: ${sanitizedError}`, 'error');\r\n        updateStatus('Error occurred', 'error');\r\n    } finally {\r\n        isProcessing = false;\r\n        enableInput();\r\n        showLoading(false);\r\n        input.focus();\r\n    }\r\n}\r\n\r\n/**\r\n * Parse markdown to HTML\r\n * Preserves UTF-8 characters properly to avoid mojibake\r\n */\r\nfunction parseMarkdown(text) {\r\n    // Convert markdown to HTML\r\n    let html = text;\r\n\r\n    // Code blocks (```code```)\r\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\r\n        return `<pre><code class=\"language-${lang || 'text'}\">${escapeHtml(code.trim())}</code></pre>`;\r\n    });\r\n\r\n    // Inline code (`code`)\r\n    html = html.replace(/`([^`]+)`/g, (match, code) => {\r\n        return `<code>${code}</code>`;\r\n    });\r\n\r\n    // Bold (**text** or __text__)\r\n    html = html.replace(/\\*\\*([^*]+?)\\*\\*/g, (match, text) => {\r\n        return `<strong>${text}</strong>`;\r\n    });\r\n    html = html.replace(/__([^_]+?)__/g, (match, text) => {\r\n        return `<strong>${text}</strong>`;\r\n    });\r\n\r\n    // Italic (*text* or _text_) - must have space or word boundary before/after\r\n    html = html.replace(/(\\s|^)\\*([^\\s*][^*]*?)\\*(\\s|$|[.,!?;:])/g, (match, before, text, after) => {\r\n        return `${before}<em>${text}</em>${after}`;\r\n    });\r\n    html = html.replace(/(\\s|^)_([^\\s_][^_]*?)_(\\s|$|[.,!?;:])/g, (match, before, text, after) => {\r\n        return `${before}<em>${text}</em>${after}`;\r\n    });\r\n\r\n    // Headers\r\n    html = html.replace(/^### (.+)$/gm, (match, text) => {\r\n        return `<h3>${text}</h3>`;\r\n    });\r\n    html = html.replace(/^## (.+)$/gm, (match, text) => {\r\n        return `<h2>${text}</h2>`;\r\n    });\r\n    html = html.replace(/^# (.+)$/gm, (match, text) => {\r\n        return `<h1>${text}</h1>`;\r\n    });\r\n\r\n    // Lists (unordered) - use callback to preserve UTF-8\r\n    html = html.replace(/^\\* (.+)$/gm, (match, text) => {\r\n        return `<li>${text}</li>`;\r\n    });\r\n    html = html.replace(/^- (.+)$/gm, (match, text) => {\r\n        return `<li>${text}</li>`;\r\n    });\r\n\r\n    // Wrap consecutive <li> in <ul>\r\n    html = html.replace(/(<li>.*<\\/li>\\n?)+/g, (match) => {\r\n        return `<ul>${match}</ul>`;\r\n    });\r\n\r\n    // Lists (ordered)\r\n    html = html.replace(/^\\d+\\. (.+)$/gm, (match, text) => {\r\n        return `<li>${text}</li>`;\r\n    });\r\n\r\n    // Links [text](url)\r\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, (match, text, url) => {\r\n        return `<a href=\"${url}\" target=\"_blank\">${text}</a>`;\r\n    });\r\n\r\n    // Line breaks\r\n    html = html.replace(/\\n\\n/g, '</p><p>');\r\n    html = html.replace(/\\n/g, '<br>');\r\n\r\n    // Wrap in paragraph\r\n    html = `<p>${html}</p>`;\r\n\r\n    // Clean up empty paragraphs\r\n    html = html.replace(/<p><\\/p>/g, '');\r\n    html = html.replace(/<p>(<h[123]>)/g, '$1');\r\n    html = html.replace(/(<\\/h[123]>)<\\/p>/g, '$1');\r\n    html = html.replace(/<p>(<pre>)/g, '$1');\r\n    html = html.replace(/(<\\/pre>)<\\/p>/g, '$1');\r\n    html = html.replace(/<p>(<ul>)/g, '$1');\r\n    html = html.replace(/(<\\/ul>)<\\/p>/g, '$1');\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * Escape HTML special characters\r\n */\r\nfunction escapeHtml(text) {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n}\r\n\r\n/**\r\n * Add a message to the chat\r\n */\r\nfunction addMessage(text, type) {\r\n    const container = document.getElementById('chat-container');\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = `message message-${type}`;\r\n\r\n    const contentDiv = document.createElement('div');\r\n    contentDiv.className = 'message-content';\r\n\r\n    // Parse markdown for assistant messages\r\n    if (type === 'assistant') {\r\n        contentDiv.innerHTML = parseMarkdown(text);\r\n    } else {\r\n        contentDiv.textContent = text;\r\n    }\r\n\r\n    messageDiv.appendChild(contentDiv);\r\n    container.appendChild(messageDiv);\r\n\r\n    // Scroll to bottom\r\n    container.scrollTop = container.scrollHeight;\r\n}\r\n\r\n/**\r\n * Add a chart message\r\n */\r\nfunction addChartMessage(chartHtml) {\r\n    const container = document.getElementById('chat-container');\r\n    const messageDiv = document.createElement('div');\r\n    messageDiv.className = 'message message-chart';\r\n\r\n    const chartDiv = document.createElement('div');\r\n    chartDiv.className = 'chart-container';\r\n\r\n    // Generate a unique ID for this chart to avoid conflicts\r\n    const uniqueId = 'plotly-chart-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\r\n\r\n    // Extract just the div content from the full HTML if needed\r\n    // Plotly returns full HTML page, we need to extract the chart div\r\n    try {\r\n        const parser = new DOMParser();\r\n        const doc = parser.parseFromString(chartHtml, 'text/html');\r\n\r\n        // Find the plotly chart div\r\n        let plotlyDiv = doc.querySelector('div[id^=\"plotly-chart\"]') || doc.querySelector('div');\r\n\r\n        if (plotlyDiv) {\r\n            // Clone the div\r\n            plotlyDiv = plotlyDiv.cloneNode(true);\r\n            \r\n            // Update the ID to be unique\r\n            plotlyDiv.id = uniqueId;\r\n\r\n            chartDiv.appendChild(plotlyDiv);\r\n\r\n            // Also copy and update scripts (Plotly needs them, and they reference the old ID)\r\n            const scripts = doc.querySelectorAll('script');\r\n            scripts.forEach(script => {\r\n                let scriptContent = script.textContent || '';\r\n                const newScript = document.createElement('script');\r\n                \r\n                if (script.src) {\r\n                    newScript.src = script.src;\r\n                } else {\r\n                    // Replace references to the old ID in inline script content\r\n                    const oldId = 'plotly-chart'; // Assuming this is the fixed ID from Python\r\n                    scriptContent = scriptContent.replace(new RegExp(oldId, 'g'), uniqueId);\r\n                    newScript.textContent = scriptContent;\r\n                }\r\n                \r\n                chartDiv.appendChild(newScript);\r\n                console.log(\"Added script for chart ID:\", uniqueId);\r\n            });\r\n        } else {\r\n            // Fallback: just insert as-is (but still update if possible)\r\n            chartDiv.innerHTML = chartHtml.replace(/plotly-chart/g, uniqueId);\r\n            console.log(\"Plotly div not found, inserted raw HTML with updated ID:\", uniqueId);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error parsing chart HTML:', error);\r\n        // Fallback: just insert as-is with ID replacement\r\n        chartDiv.innerHTML = chartHtml.replace(/plotly-chart/g, uniqueId);\r\n    }\r\n\r\n    messageDiv.appendChild(chartDiv);\r\n    container.appendChild(messageDiv);\r\n\r\n    // Scroll to bottom\r\n    container.scrollTop = container.scrollHeight;\r\n}\r\n\r\n/**\r\n * Update status bar\r\n */\r\nfunction updateStatus(text, type) {\r\n    const status = document.getElementById('status');\r\n    status.textContent = text;\r\n    status.className = `status status-${type}`;\r\n}\r\n\r\n/**\r\n * Enable/disable input\r\n */\r\nfunction enableInput() {\r\n    document.getElementById('user-input').disabled = false;\r\n    document.getElementById('send-btn').disabled = false;\r\n}\r\n\r\nfunction disableInput() {\r\n    document.getElementById('user-input').disabled = true;\r\n    document.getElementById('send-btn').disabled = true;\r\n}\r\n\r\n/**\r\n * Show/hide loading indicator\r\n */\r\nfunction showLoading(show) {\r\n    const loading = document.getElementById('loading');\r\n    loading.style.display = show ? 'flex' : 'none';\r\n}\r\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Excel Chatbot</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\"/> </head> <body> <div class=\\\"container\\\"> <header class=\\\"header\\\"> <img src=\\\"\" + ___HTML_LOADER_IMPORT_1___ + \"\\\" alt=\\\"InSync Nexus\\\" class=\\\"header-logo\\\"/> <div class=\\\"header-content\\\"> <h1>InSync Nexus</h1> <div id=\\\"status\\\" class=\\\"status\\\">Initializing...</div> <div id=\\\"context-indicator\\\" class=\\\"context-indicator\\\" style=\\\"display:none\\\"></div> </div> <div class=\\\"header-controls\\\"> <label class=\\\"toggle-label\\\"> <input type=\\\"checkbox\\\" id=\\\"chart-toggle\\\" checked=\\\"checked\\\"/> <span class=\\\"toggle-text\\\">Charts</span> <div class=\\\"charts-info-tooltip\\\"> <div class=\\\"charts-info-content\\\"> <div class=\\\"charts-info-title\\\">Chart Generation</div> <div class=\\\"charts-info-text\\\"> Charts are automatically generated when prompts are suitable for visualization and provide better insights than text alone. </div> <div class=\\\"charts-types-list\\\"> <strong>Available Chart Types for InSync AI Agent:</strong><br> • <strong>Line Charts</strong> - For trends over time periods<br> • <strong>Bar Charts</strong> - For value comparisons<br> • <strong>Comparison Bar</strong> - For multi-metric analysis<br> • <strong>Area Charts</strong> - For cumulative data<br> • <strong>Waterfall Charts</strong> - For sequential changes </div> </div> </div> </label> <button id=\\\"clear-chat-btn\\\" class=\\\"clear-chat-btn\\\" title=\\\"Clear conversation\\\">Clear</button> </div> </header> <div id=\\\"chat-container\\\" class=\\\"chat-container\\\"> </div> <div class=\\\"input-area\\\"> <input type=\\\"text\\\" id=\\\"user-input\\\" placeholder=\\\"Ask about your InSync API data...\\\" disabled=\\\"disabled\\\"/> <button id=\\\"send-btn\\\" disabled=\\\"disabled\\\">Send</button> </div> <div id=\\\"loading\\\" class=\\\"loading\\\" style=\\\"display:none\\\"> <div class=\\\"spinner\\\"></div> <span>Processing...</span> </div> </div> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","BACKEND_URL","SHEET_NAME","isReady","isProcessing","embeddingsLoaded","sessionId","conversationHistory","_initializeAddin","_callee","_context","initializeSession","getElementById","addEventListener","handleSendMessage","key","clearConversation","addMessage","loadInSyncAPISheet","savedSessionId","sessionStorage","getItem","savedHistory","JSON","parse","console","log","concat","updateContextIndicator","forEach","msg","content","role","error","createNewSession","Math","random","toString","setItem","stringify","sanitizeErrorMessage","errorMessage","message","toLowerCase","includes","indicator","messageCount","textContent","style","display","saveConversationHistory","_clearConversation","_callee2","response","result","sanitizedError","_t","_t2","_context2","updateStatus","fetch","method","headers","body","json","embeddingsPreserved","warn","innerHTML","_loadInSyncAPISheet","_callee4","_t3","_context4","Excel","run","_ref","_callee3","context","sheets","inSyncSheet","modelSheet","ticker","tickerCell","usedRange","data","address","_context3","workbook","worksheets","load","sync","items","find","sheet","name","getRange","values","trim","getUsedRange","worksheetName","metadata","totalRows","totalCols","ok","detail","lineItemCount","columnCount","enableInput","_x","_handleSendMessage","_callee5","input","userMessage","enableCharts","assistantMessage","_t4","_context5","timestamp","Date","now","push","disableInput","showLoading","checked","question","excelData","answer","hasChart","chartHtml","addChartMessage","contextLength","focus","text","type","container","messageDiv","createElement","className","contentDiv","html","match","lang","code","div","escapeHtml","before","after","url","parseMarkdown","appendChild","scrollTop","scrollHeight","chartDiv","uniqueId","substr","doc","DOMParser","parseFromString","plotlyDiv","querySelector","cloneNode","id","querySelectorAll","script","scriptContent","newScript","RegExp","status","disabled","show","Office","onReady","info","host","HostType","initializeAddin","URL"],"sourceRoot":""}